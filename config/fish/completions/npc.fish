complete -c npc -s v -l version                   -d 'Print version information'
complete -c npc -s h -l help                      -d 'Produce help message'
complete -c npc -l help-hidden                    -d 'Produce help message for all hidden options'
complete -c npc -l help-message -r                -d 'Print help about compiler message'
complete -c npc -l response-file -r               -d 'Read options from file <arg>. Can be specified with \'@<arg>\', too'
complete -c npc -l release                        -d 'Optimize build for release (shortcut for multiple other options, see text below options)'
complete -c npc -s q -l quiet                     -d 'Don\'t print anything needlessly'
complete -c npc -l compact-xml                    -d 'Turn off pretty-print of XML files, making them smaller'
complete -c npc -l allocator-tenacity -r          -d 'Sets how hard allocators will try to solve their problem, for all allocators (default is 100)'
complete -c npc -l variable-allocator-tenacity -r -d 'Sets how hard the variable allocator will try to solve the problem (default is 100)'
complete -c npc -l table-allocator-tenacity -r    -d 'Sets how hard the table allocator will try to solve the problem (default is 100)'
complete -c npc -l optimize-power                 -d 'Force the compiler to optimize allocation for power usage'
complete -c npc -l no-save-source                 -d 'Prevent saving of the source code for the application in the NSI file (this is the default)'
complete -c npc -l save-source                    -d 'Save the source code for the applicationcoded in the NSI file (default is off)'
complete -c npc -s d -l dir -r                    -d 'Write output files in directory <arg>'
complete -c npc -s I -l include-path -r           -d 'Add path <arg> to include path'
complete -c npc -l treat-warnings-as-errors       -d 'Treat any warning as an error and fail compilation'
complete -c npc -l disable-all-warnings           -d 'Disable output of all warnings'
complete -c npc -l enable-all-warnings            -d 'Turn on all warnings, including the default-off ones'
complete -c npc -s W -l disable-warning -r        -d 'Disables the warning with the given name'
complete -c npc -s w -l enable-warning -r         -d 'Enables the warning with the given name'
complete -c npc -s c -l config-file -r            -d 'Read configuration from file <arg>'
complete -c npc -s o -l output -r                 -d 'Write resulting NEX file as <arg>'
complete -c npc -s D -l define -r                 -d 'Define preprocessor macro'
complete -c npc -l statistics -r                  -d 'Write application statistics to file <arg>'
complete -c npc -l suggest -f -r -a "all\t'Show all suggestions' variables\t'Variable suggestions' pe\t'Assembly code' ap\t'Engine calls'"       -d 'Get code optimization and improvement suggestions of type <arg>'
complete -c npc -l instruction-info -r            -d 'Write application instruction information to file <arg>'
complete -c npc -l ringbus-warn-only              -d 'Instead of generating compilation errors on ringbus overload, only warnings are generated (intended for testing only)'
complete -c npc -l engine-warn-only               -d 'Instead of generating compilation errors on engine overload, only warnings are generated (intended for testing only)'
complete -c npc -s j -r                           -d 'Set the number of threads used in the parallel algorithms of the compiler'
complete -c npc -l test-crash                        -d 'Make compiler crash for testing'
complete -c npc -l sphinx                            -d 'Produce help message for all options in sphinx format'
complete -c npc -l asm -r                            -d 'Treat argument as a series of statements to be assembled, separated by semicolon, and optionally prefixed with address in the form "@addr:". Prints resulting instruction words as hex binary'
complete -c npc -l disasm -r                         -d 'Treat argument as a hex string of a binary instruction word, and disassemble it'
complete -c npc -l show-cm -r                        -d 'Treat argument as a hex string of a binary control message, and show its fields'
complete -c npc -l skip-var-alloc                    -d 'Skip the variable allocation when debugging the compiler. Will produce an broken, unusable nex file.'
complete -c npc -l lookup-alias -r                   -d 'Treat argument as an alias string, and display the uid, address, and size of the alias'
complete -c npc -l lookup-table-access -r            -d 'Treat argument as an engine access description (eng:pipe:tblprf:tbltype:tblop:idx), and display the uid, address, opcode, and size of the access'
complete -c npc -l returnvalue-offset -r             -d 'Adds <arg> to the return code of the compiler process (for test framework)'
complete -c npc -l input-file -r                     -d 'Add source input file (normally supplied via non-option parameters)'
complete -c npc -l test-messages                     -d 'Output messages for testing the test-framework'
complete -c npc -l used-engines-only                 -d 'Only set up table profile in engines that are used'
complete -c npc -l cfg -r                            -d 'Write CFG to file <arg>'
complete -c npc -l programcfg -r                     -d 'Write Program CFG to file <arg>'
complete -c npc -l check-nsi -r                      -d 'Verify NSI export/import using the given NSI file'
complete -c npc -l ringbus-analysis -r               -d 'Read ringbus accesses from input file <arg>'
complete -c npc -l allocator-debug -r                -d 'Write debug output about allocations in XML format to file <arg>'
complete -c npc -l init-debug -r                     -d 'Write debug output about variable initialization in XML format to file <arg>'
complete -c npc -l liveness-debug -r                 -d 'Write debug output about liveness analysis in XML format to file <arg>'
complete -c npc -l liveness-debug-filter -r          -d 'Filter liveness debug to vars matching regex <arg>, matching only global vars if <arg> starts with @'
complete -c npc -l parser-debug -r                   -d 'Write debug output about parsing in XML format to file <arg>'
complete -c npc -l ringbus-debug -r                  -d 'Write debug output about ringbus load in XML format to file <arg>'
complete -c npc -l ringbus-py-output -r              -d 'Write output about ringbus load in Python format to file <arg> (Intended for internal test tools only)'
complete -c npc -l engine-debug -r                   -d 'Write debug output about for engine load in XML format to file <arg>'
complete -c npc -l ringbus-max-segment-load -r       -d 'Set the maximum segment load to the percentage value in <arg>, default is 80 (intended for testing only)'
complete -c npc -s P -l preprocess-only              -d 'For each source file, just write output from preprocessor to a file'
complete -c npc -l tdm-calendar-length -r            -d 'Override the default length of the TDM Calendar in AP and PipeInit (intended for testing only)'
complete -c npc -l pipe-unit-tdm-calendar-length -r  -d 'Override the default length of the TDM Calendar in PipeUnits (intended for testing only)'
complete -c npc -l dont-share-processor-groups       -d 'Ensures that each ProPath has a unique set or processors (intended for testing only)'
complete -c npc -l gp-size -r                        -d 'Specify a smaller size of GP to examine the headroom for the variable allocator'
complete -c npc -l use-cache                         -d 'Use cached allocation results from previous build'
complete -c npc -l experimental-optimize-writes      -d 'Use experimental variable allocator that optimizes AP writes'

